## Setup replication
## We setup double Master/Slave replication between mariadb_servers[0] and mariadb_servers[1]
- name: Create Replication User "{{ mariadb_servers | first }}"
  mysql_user:
    name: "{{ mariadb_repl_user }}"
    password: "{{ mariadb_repl_pwd }}"
    host: "{{ mariadb_servers | last }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"

- name: Create Replication User "{{ mariadb_servers| last }}"
  mysql_user:
    name: "{{ mariadb_repl_user }}"
    password: "{{ mariadb_repl_pwd }}"
    host: "{{ mariadb_servers | first }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

#######################################################################
##################### Replication Privileges       ####################
#######################################################################

# - name: Check Slave ACL "{{ mariadb_servers| first }}"
#   shell: >
#     mysql -u root -p{{ mariadb_root_password }} -e 'select User from mysql.user' | grep '{{mariadb_repl_user}}'
#   register: slave_acl_m1
#   ignore_errors: True
#   when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"

- name: Enable Slave ACL "{{ mariadb_servers| first }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e \
      "GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '{{ mariadb_repl_user }}'@'%' IDENTIFIED BY '{{mariadb_repl_pwd}}'; FLUSH PRIVILEGES"
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"
  # when: slave_acl_m1.rc is defined and slave_acl_m1.rc == 1 and mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"

# - name: Check Slave ACL "{{ mariadb_servers| last }}"
#   shell: >
#     mysql -u root -p{{ mariadb_root_password }} -e 'select User from mysql.user' | grep '{{mariadb_repl_user}}'
#   register: slave_acl_m2
#   ignore_errors: True
#   when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

- name: Enable Slave ACL "{{ mariadb_servers| last }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e \
      "GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '{{ mariadb_repl_user }}'@'%' IDENTIFIED BY '{{mariadb_repl_pwd}}'; FLUSH PRIVILEGES"
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"
  # when: slave_acl_m2.rc is defined and slave_acl_m2.rc == 1 and mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

##################### Wait Server  Started ############################

- name: MariaDB Wait {{ item }}
  shell: >
    mysql -u {{mariadb_repl_user}} -p{{ mariadb_repl_pwd }} -h {{item}} -e 'show databases'
  failed_when: false
  register: root_pwd_check
  until: root_pwd_check.rc == 0
  retries: "360"
  delay: 10
  with_items: "{{ mariadb_servers }}"

- name: Enable "{{ mariadb_servers| first }}" > "{{ mariadb_servers| last }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e 'show databases'
  failed_when: false
  register: root_pwd_check
  until: root_pwd_check.rc == 0
  retries: "360"
  delay: 10
  with_items: "{{ mariadb_servers }}"

####################################################################
##################### Setup Replication ############################
####################################################################


## master 1 > master 2 replication
- name: Get Master Binary Position "{{ mariadb_servers | first }}" > "{{ mariadb_servers | last }}"
  shell: >
    mysql -u {{ mariadb_repl_user }} -p{{ mariadb_repl_pwd }} -h"{{ mariadb_servers | first}}" -e 'show master status \G'
  register: master_status_m1
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

- name: Extract Master Binary Position  "{{ mariadb_servers | first }}" > "{{ mariadb_servers | last }}"
  set_fact:
     binary_file_m1: "{{ master_status_m1.stdout_lines[1] | trim | regex_replace('File:', '') }}" #regex_search('^.*File.*$') |
     binary_position_m1: "{{ master_status_m1.stdout_lines[2] | trim | regex_replace('Position:', '')}}" #| regex_search('^.*Position.*$') 
  when: mariadb_servers is defined and mariadb_ha_enabled and inventory_hostname == "{{ mariadb_servers | last }}"

- name: Check Master Position Exist On Slave "{{ mariadb_servers | first }}" > "{{ mariadb_servers | last }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e 'show slave status \G'| grep 'Master_Host' | grep '{{ mariadb_servers | first }}'
  register: slave_status_m1
  ignore_errors: True
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

- name: Add Master Position On Slave "{{ mariadb_servers | first }}" > "{{ mariadb_servers | last }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e \
      "STOP SLAVE ; 
        RESET SLAVE ; 
        CHANGE MASTER TO MASTER_HOST = '{{ mariadb_servers | first }}',
        MASTER_USER = '{{ mariadb_repl_user }}',
        MASTER_PASSWORD = '{{ mariadb_repl_pwd }}',
        MASTER_LOG_FILE='{{ binary_file_m1 | trim }}',
        MASTER_LOG_POS={{ binary_position_m1 | trim }} ; 
        START SLAVE ;
        "
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

## master 2 > master q replication
- name: Get Master Binary Position "{{ mariadb_servers | last }}" > "{{ mariadb_servers | first }}"
  shell: >
    mysql -u {{ mariadb_repl_user }} -p{{ mariadb_repl_pwd }} -h"{{ mariadb_servers | last}}" -e 'show master status \G'
  register: master_status_m1
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"

- name: Extract Master Binary Position  "{{ mariadb_servers | last }}" > "{{ mariadb_servers | first }}"
  set_fact:
     binary_file_m2: "{{ master_status_m1.stdout_lines[1] | trim | regex_replace('File:', '') }}" #regex_search('^.*File.*$') |
     binary_position_m2: "{{ master_status_m1.stdout_lines[2] | trim | regex_replace('Position:', '')}}" #| regex_search('^.*Position.*$') 
  when: mariadb_servers is defined and mariadb_ha_enabled and inventory_hostname == "{{ mariadb_servers | first }}"

- name: Check Master Position Exist On Slave "{{ mariadb_servers | last }}" > "{{ mariadb_servers | first }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e 'show slave status \G'| grep 'Master_Host' | grep '{{ mariadb_servers | first }}'
  register: slave_status_m1
  ignore_errors: True
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"

- name: Add Master Position On Slave "{{ mariadb_servers | first }}" > "{{ mariadb_servers | last }}"
  shell: >
    mysql -u root -p{{ mariadb_root_password }} -e \
      "STOP SLAVE ; 
        RESET SLAVE ; 
        CHANGE MASTER TO MASTER_HOST = '{{ mariadb_servers | last }}',
        MASTER_USER = '{{ mariadb_repl_user }}',
        MASTER_PASSWORD = '{{ mariadb_repl_pwd }}',
        MASTER_LOG_FILE='{{ binary_file_m2 | trim }}',
        MASTER_LOG_POS={{ binary_position_m2 | trim }} ; 
        START SLAVE ;
        "
  when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}"
# - name: debug m1
#   debug: 
#     msg: master position are  binary_file "{{ binary_file_m1 }}" binary_position "{{ binary_position_m1 }}"
#   when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | first }}" and slave_status_m1.rc == 1

# - name: debug m2
#   debug: 
#     msg: master position are  binary_file "{{ binary_file_m2 }}" binary_position "{{ binary_position_m2 }}"
#   when: mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"

# - name: Enable Slave ACL "{{ mariadb_servers| last }}"
#   shell: >
#     mysql -u root -p{{ mariadb_root_password }} -e \
#       'GRANT REPLICATION SLAVE ON *.* TO '{{ mariadb_repl_user }}'@'%' IDENTIFIED BY '{{mariadb_repl_pwd}}; FLUSH PRIVILEGES'
#   when: slave_acl_m2.rc == 1 and mariadb_servers is defined and inventory_hostname == "{{ mariadb_servers | last }}"


